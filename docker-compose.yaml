x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
    dockerfile: dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.default
    AIRFLOW__API__SECRET_KEY: airflow.api.auth.backend.default
    AIRFLOW__API_AUTH__JWT_SECRET: dcfb0dcad6958fba10842b53641a2b689724c2354f1912f5ad6e774a06e04b59
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/dbt:/opt/dbt
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  cpus: 2
  mem_limit: 2g
  memswap_limit: 2g
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "1"

services:

  postgresdb:
    depends_on:
      maquina2:
        condition: service_started    
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgresdb
    hostname: postgresdb
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
      - /opt/postgres/__data/pgdata:/var/lib/postgresql/data
      - /opt/postgres/__data/pg-run:/var/run/postgresql/
      - /opt/postgres/ssh:/var/lib/postgresql/.ssh 
      # - /opt/postgres/pgbackrest:/etc/pgbackrest/    
      - /opt/postgres/ssh/sshd:/etc/ssh/sshd_config     
    ports:
      - "5432:5432"
      - "2221:22"  
    environment:
      POSTGRES_PASSWORD: 1234abc@
      #PGDATA: /pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s        
    networks:
      rede:
        ipv4_address: 110.0.0.108
 
  # Backup Server
  maquina2:
    build:
      context: ./maquina2
    container_name: maquina2
    hostname: maquina2
    ports:
      - "2222:22"
    volumes:
      - ./maquina2/data:/var/lib/pgbackrest:rw
      - ./maquina2/log:/var/log/pgbackrest:rw
      - ./maquina2/maquina2-ssh:/var/lib/postgresql/.ssh:rw
    networks:
      rede:
        ipv4_address: 110.0.0.109

  pgadmin-compose:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "matheusvicente125@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "postgres"
    ports:
      - "8080:80"
    networks:
      rede:
        ipv4_address: 110.0.0.110

  zabbix-server:
    build: /opt/zabbix/zabbix-odbc
    container_name: zabbix-server
    environment:
      DB_SERVER_HOST: postgresdb
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zbxpass
      POSTGRES_DB: zabbix
      ZBX_ENABLE_ODBC: "true"
    volumes:
     - /opt/zabbix/server/lib:/var/lib/zabbix
     - /opt/zabbix/server/etc:/etc/zabbix
     - /opt/zabbix/server/alertscripts:/usr/lib/zabbix/alertscripts
     - /opt/zabbix/server/externalscripts:/usr/lib/zabbix/externalscripts
    depends_on:
      - postgresdb
    ports:
      - "10051:10051"
    networks:
      rede:
        ipv4_address: 110.0.0.111

  zabbix-frontend:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-latest
    container_name: zabbix-frontend
    environment:
      DB_SERVER_HOST: postgresdb
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zbxpass
      POSTGRES_DB: zabbix
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: America/Sao_Paulo
    ports:
      - "8081:8080"
    depends_on:
      - zabbix-server
    networks:
      rede:
        ipv4_address: 110.0.0.112

  temboard.web:
    depends_on:
      temboard.db:
        condition: service_healthy
    container_name: temboard.web
    hostname: temboard.web
    image: temboard.web:latest
    restart: always
    build:
      context: .
      dockerfile: /opt/temboard/Dockerfile
      target: temboard    
    environment:
      # Log
      DEBUG: "INFO"
      # Temboard
      TEMBOARD_PORT: 8888
      # Repository
      PGHOST: temboard.db
      PGPORT: 5432
      PGUSER: temboard
      TEMBOARD_PASSWORD: temboard
      TEMBOARD_DATABASE: temboard
    ports:
      - "8888:8888"
    volumes:
      - /opt/temboard/temboard/etc:/etc/temboard
      - /opt/temboard/temboard/var:/var/lib/temboard
      - /opt/temboard/temboard/log:/var/log/temboard
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://temboard.web:$${TEMBOARD_PORT}/ || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 20
      start_period: 15s
    networks:
      rede:
        ipv4_address: 110.0.0.113
    entrypoint: ["bash", "-c"]
    command: [ "/home/temboard/entrypoint.sh" ]

  temboard.db:
    container_name: temboard.db
    hostname: temboard.db
    image: postgres:15-alpine
    restart: always
    ports:
      - "15432:5432"      
    volumes:
      - /opt/temboard/pgdata:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U temboard" ]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 30s
    environment:
      POSTGRES_USER: "temboard"
      POSTGRES_PASSWORD: "temboard"
      POSTGRES_DB: "temboard"
      PGPORT: 5432
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      rede:
        ipv4_address: 110.0.0.114

  temboard.agente.postgresdb:
    depends_on:
      postgresdb:
        condition: service_healthy
      temboard.web:
        condition: service_healthy
    container_name: temboard.agente.postgresdb
    hostname: temboard.agente.postgresdb
    image: dalibo/temboard-agent:9
    restart: always
    networks:
      rede:
        ipv4_address: 110.0.0.115
    volumes:
      - /opt/postgres/__data/pgdata:/var/lib/postgresql/data
      #- /opt/postgres/__data/pgdata:/var/lib/postgresql/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/postgres/__data/pg-run:/var/run/postgresql/  
    environment:
      TEMBOARD_UI_URL: http://temboard.web:8888/
      TEMBOARD_UI_USER: admin
      TEMBOARD_UI_PASSWORD: admin
      TEMBOARD_LOGGING_LEVEL: INFO
      TEMBOARD_HOSTNAME: postgresdb.local
      TEMBOARD_PGHOST: postgresdb
      TEMBOARD_PGPORT: 5432
      TEMBOARD_PGUSER: manager
      TEMBOARD_PGPASSWORD: 1234abc@
      TEMBOARD_PGDATABASE: nba
      TEMBOARD_PGDATA: /var/lib/postgresql/data
      PGDATA: "/var/lib/postgresql/data"
      #PGHOST: postgresdb 
      #PGPORT: 5432
      #PGUSER: postgres
      #PGPASSWORD: 1234abc@
       

  dw:
    build:
      context: ./dw
      dockerfile: Dockerfile
    container_name: dw
    hostname: dw
    ports:
      - "15433:5432"
    volumes:
      - ./dw/data:/var/lib/postgresql/data:rw
      - ./dw/log:/var/lib/postgresql/log:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      rede:
        ipv4_address: 110.0.0.116
    command: |
      -c "wal_keep_size=64MB"


  postgres:
    container_name: airflow-db
    hostname: airflow-db
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./airflow/postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      rede:
        ipv4_address: 110.0.0.117

  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    hostname: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      rede:
        ipv4_address: 110.0.0.118

  airflow-apiserver:
    <<: *airflow-common
    container_name: airflow-apiserver
    hostname: airflow-apiserver
    build:
      context: ./airflow
      dockerfile: dockerfile
    #command: api
    command: api-server  
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.119

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.120

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    hostname: airflow-dag-processor
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.121

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    hostname: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.122

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    hostname: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.123

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    hostname: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      rede:
        ipv4_address: 110.0.0.124

  airflow-cli:
    <<: *airflow-common
    hostname: airflow-cli
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      rede:
        ipv4_address: 110.0.0.125

  flower:
    <<: *airflow-common
    container_name: airflow-flower
    hostname: airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      rede:
        ipv4_address: 110.0.0.126

networks:
  rede:
    name: rede
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 110.0.0.0/24

